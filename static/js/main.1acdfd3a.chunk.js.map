{"version":3,"sources":["components/Box.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","id","className","nameClass","onClick","value","Board","boardStyle","margin","textAlign","width","historyStyle","rootDiv","display","historyDiv","historyButtons","gameSetting","state","squares","Array","fill","history","xIsNext","play_with_bot","game_start","difficulty","player_x","player_0","winning_positions","player","win_pos","forEach","element","includes","this","length","i","slice","calculateWinner","setState","concat","setInterval","randomIndex","botAvailableMove","handleClick","filter_index","map","index","filter","Math","floor","random","console","log","checkPlayerWin","abs","splice","game_state","lines","a","b","c","ev","target","checked","currentTarget","status","winner","game_history","style","handleHistory","disabled","handleGoToButtons","game_difficulty","type","name","onChange","handleGameDifficulty","htmlFor","handlePlayWithBot","renderBox","Component","Game","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1acdfd3a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Box.css'\r\n\r\nconst Box = (props) => {\r\n    return (\r\n        <div id={props.id} className={props.nameClass} \r\n            onClick={()=>{props.onClick()}}>\r\n            <span className=\"board-span\">{props.value}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box","import React, { Component } from 'react'\r\nimport Box from './Box';\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            squares: Array(9).fill(null),\r\n            history: [\r\n                {\r\n                    squares: Array(9).fill(null)\r\n                }\r\n            ],\r\n            xIsNext: true,\r\n            play_with_bot: false,\r\n            game_start: false,\r\n            difficulty: 'easy',\r\n            player_x: [],\r\n            player_0: [],\r\n        }\r\n    }\r\n\r\n    checkPlayerWin(winning_positions, player){\r\n        var win_pos = false;\r\n        winning_positions.forEach(element => {\r\n            if(player.includes(element[0]) && player.includes(element[1])){\r\n                if(!this.state.squares[element[2]])\r\n                    win_pos = element[2]\r\n            }\r\n            else if(player.includes(element[1]) && player.includes(element[2])){\r\n                if(!this.state.squares[element[0]])\r\n                    win_pos = element[0]\r\n            }\r\n            else if(player.includes(element[0]) && player.includes(element[2])){\r\n                if(!this.state.squares[element[1]])\r\n                    win_pos = element[1]\r\n            }\r\n        });\r\n\r\n        // Check if win_pos is occupied\r\n        if(this.state.squares[win_pos] || player.length < 2){\r\n            return false\r\n        }\r\n        return win_pos;\r\n    }\r\n\r\n    handleClick(i) {\r\n        const squares = this.state.history[this.state.history.length - 1].squares.slice();\r\n        if (this.calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : '0';\r\n        if(this.state.xIsNext){\r\n            this.setState({\r\n                player_x: this.state.player_x.concat(i)\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                player_0: this.state.player_0.concat(i)\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            squares: squares,\r\n            history: this.state.history.concat({ squares: squares }),\r\n            xIsNext: !this.state.xIsNext,\r\n            game_start: true\r\n        }, () => {\r\n            setInterval(() => {\r\n                // bot next move.\r\n                if (this.state.play_with_bot && !this.state.xIsNext) {\r\n                    let randomIndex = this.botAvailableMove()\r\n                    this.handleClick(randomIndex)\r\n                }\r\n            }, 1000)\r\n\r\n        });\r\n    }\r\n\r\n    botAvailableMove() {\r\n        let available_index = this.state.squares.map((value, index) => {\r\n            if (!value) { return index }\r\n            else { return false }\r\n        })\r\n\r\n        let filter_index = available_index.filter((value) => {\r\n            if (value === 0 || value) return true\r\n            else\r\n                return null\r\n        })\r\n        \r\n        let randomIndex;\r\n        const winning_positions = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n\r\n        if(this.state.difficulty === 'easy'){\r\n            randomIndex = filter_index[Math.floor(Math.random() * filter_index.length)];\r\n        }\r\n        else{\r\n            // 1. If player 'X' choose the center box\r\n            if(this.state.player_x[0] === 4){\r\n                // 1.1 Bot first move. \r\n                if(this.state.history.length-1 === 1){\r\n                    console.log('Started with middle box')\r\n                    console.log('Corner occupied by bot')\r\n                    randomIndex = [0, 2, 6, 8][Math.floor(Math.random() * [0, 2, 6, 8].length)]\r\n                }\r\n                // 1.2 check if bot can win\r\n                else if(this.checkPlayerWin(winning_positions, this.state.player_0) === 0 || this.checkPlayerWin(winning_positions, this.state.player_0)){\r\n                    console.log('Bot can win')\r\n                    randomIndex = this.checkPlayerWin(winning_positions, this.state.player_0)\r\n                }\r\n\r\n                // 1.3 check if opponent could win\r\n                else if (this.checkPlayerWin(winning_positions, this.state.player_x) === 0 || this.checkPlayerWin(winning_positions, this.state.player_x)){\r\n                    console.log('Opponent can win')\r\n                    randomIndex = this.checkPlayerWin(winning_positions, this.state.player_x)\r\n                }\r\n\r\n                // 1.4 check has 2 even number (Special condition)\r\n                else if ( this.state.difficulty === 'hard' && this.state.player_x.length === 2 && ((Math.abs(this.state.player_x[1] - this.state.player_0[0]) === 4) || (Math.abs(this.state.player_x[1] - this.state.player_0[0]) === 8))){\r\n                    console.log('Special condition found! so, occupied corner by bot')\r\n                    if((Math.abs(this.state.player_x[1] - this.state.player_0[0]) === 4))\r\n                        randomIndex = [0, 8][Math.floor(Math.random() * [0, 8].length)]\r\n\r\n                    if((Math.abs(this.state.player_x[1] - this.state.player_0[0]) === 8))\r\n                        randomIndex = [2, 6][Math.floor(Math.random() * [2, 6].length)]\r\n                }\r\n                // 1.5 Random Move\r\n                else{\r\n                    console.log('Random move')\r\n                    randomIndex = filter_index[Math.floor(Math.random() * filter_index.length)];\r\n                }\r\n            }\r\n            else if([0, 2, 6, 8].includes(this.state.player_x[0])){ // 2. Check if game starts with corner conditions\r\n                // 2.1 Occupy middle box\r\n                if(this.state.history.length-1 === 1){\r\n                    console.log('Started with Corner box')\r\n                    console.log('Middle box occupied by bot')\r\n                    randomIndex = 4\r\n                }\r\n\r\n                // 2.2 check if bot can win\r\n                else if(this.checkPlayerWin(winning_positions, this.state.player_0) === 0 || this.checkPlayerWin(winning_positions, this.state.player_0)){\r\n                    console.log('Bot can win')\r\n                    randomIndex = this.checkPlayerWin(winning_positions, this.state.player_0)\r\n                }\r\n\r\n                // 2.3 check if opponent could win\r\n                else if (this.checkPlayerWin(winning_positions, this.state.player_x) === 0 || this.checkPlayerWin(winning_positions, this.state.player_x)){\r\n                    console.log('Opponent can win')\r\n                    randomIndex = this.checkPlayerWin(winning_positions, this.state.player_x)\r\n                }\r\n                \r\n                // 2.4 check if player occupies two corners in two moves. (Special condition)\r\n                else if (this.state.difficulty === 'hard' && this.state.player_x.length === 2 && ((Math.abs(this.state.player_x[1] - this.state.player_x[0]) === 4) || (Math.abs(this.state.player_x[1] - this.state.player_x[0]) === 8))){\r\n                    console.log('Special condition found! so, occupied corner by bot')\r\n                    randomIndex = [1, 3, 5, 7][Math.floor(Math.random() * [1, 3, 5, 7].length)]\r\n                }\r\n                // 2.5 Random Move\r\n                else{\r\n                    console.log('Random move')\r\n                    randomIndex = filter_index[Math.floor(Math.random() * filter_index.length)];\r\n                }\r\n            }\r\n            else if([1, 3, 5, 7].includes(this.state.player_x[0])){ // 3. game start with side condition\r\n                // 3.1 Bot first move\r\n                if(this.state.history.length-1 === 1){\r\n                    console.log('bot first move')\r\n                    winning_positions.forEach(element => {\r\n                        if(element[1] === this.state.player_x[0]){\r\n                            randomIndex = element[0];\r\n                        }\r\n                    })\r\n                }\r\n                // 3.2 Bot second move\r\n                else if(this.state.player_x.length === 2 && this.state.player_x[1] !== 4){\r\n                    console.log('bot occupy middle box in second move');\r\n                    randomIndex = 4;\r\n                }\r\n                // 3.3 check if bot can win\r\n                else if(this.checkPlayerWin(winning_positions, this.state.player_0) === 0 || this.checkPlayerWin(winning_positions, this.state.player_0)){\r\n                    console.log('Bot can win')\r\n                    randomIndex = this.checkPlayerWin(winning_positions, this.state.player_0)\r\n                }\r\n\r\n                // 3.4 check if opponent could win\r\n                else if (this.checkPlayerWin(winning_positions, this.state.player_x) === 0 || this.checkPlayerWin(winning_positions, this.state.player_x)){\r\n                    console.log('Opponent can win')\r\n                    randomIndex = this.checkPlayerWin(winning_positions, this.state.player_x)\r\n                }\r\n                // 3.5 Random Move\r\n                else{\r\n                    console.log('Random move')\r\n                    randomIndex = filter_index[Math.floor(Math.random() * filter_index.length)];\r\n                }\r\n            }\r\n        }\r\n\r\n        return randomIndex\r\n    }\r\n\r\n    handleHistory(index) {\r\n        if(index === 0){\r\n            this.setState({\r\n                player_0: [],\r\n                player_x: []\r\n            })\r\n        }\r\n        this.state.history.splice(index + 1)\r\n        this.setState({\r\n            history: this.state.history,\r\n            xIsNext: index % 2 !== 0 ? false : true,\r\n            game_start: index === 0 ? false : true\r\n        })\r\n    }\r\n\r\n    renderBox(i, nameClass) {\r\n        let game_state = this.state.history[this.state.history.length - 1].squares;\r\n        return <Box id={i} nameClass={nameClass} value={game_state[i]}\r\n            onClick={() => { this.handleClick(i) }} />;\r\n    }\r\n\r\n    boardStyle = {\r\n        margin: '5% 0% 0% 0%',\r\n        textAlign: 'center',\r\n        width: '60%',\r\n    }\r\n\r\n    historyStyle = {\r\n        margin: '5% 0% 0% 0%',\r\n        textAlign: 'center',\r\n    }\r\n\r\n    rootDiv = {\r\n        display: 'flex'\r\n    }\r\n\r\n    historyDiv = {\r\n        display: 'grid'\r\n    }\r\n\r\n    historyButtons = {\r\n        margin: '0px 0px 5px 0px'\r\n    }\r\n\r\n    gameSetting = {\r\n        width: '20%',\r\n        textAlign: 'center',\r\n        margin: '5% 0% 0% 0%',\r\n    }\r\n\r\n    calculateWinner(squares) {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handlePlayWithBot(ev) {\r\n        this.setState({\r\n            play_with_bot: ev.target.checked\r\n        })\r\n    }\r\n\r\n    handleGameDifficulty(ev) {\r\n        this.setState({\r\n            difficulty: ev.currentTarget.id\r\n        })\r\n    }\r\n\r\n    handleGoToButtons(index){\r\n        if(this.state.play_with_bot){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const winner = this.calculateWinner(this.state.history[this.state.history.length - 1].squares.slice());\r\n        let status;\r\n        if (winner) {\r\n            status = 'winner is ' + winner;\r\n        }\r\n        else if (this.state.history.length >= 10) {\r\n            status = 'Game Draw !!!!'\r\n        }\r\n        else {\r\n            status = 'Player ' + (this.state.xIsNext ? 'X' : '0') + ' turn'\r\n        }\r\n\r\n        const game_history = this.state.history.map((history, index) => {\r\n            if (index === 0) {\r\n                return <button key={index} style={this.historyButtons} onClick={() => this.handleHistory(index)}>Go to Game Start</button>\r\n            }\r\n            else {\r\n                return <button key={index} style={this.historyButtons} \r\n                disabled={this.handleGoToButtons(index)}\r\n                onClick={() => this.handleHistory(index)}>Go to Move : {index}</button>\r\n            }\r\n        })\r\n\r\n        let game_difficulty = ''\r\n        if (this.state.play_with_bot) {\r\n            game_difficulty = <>\r\n                <h5>Select difficulty</h5>\r\n\r\n                <input type=\"radio\" name=\"gameDifficulty\" id=\"easy\" checked={this.state.difficulty === 'easy'}\r\n                    onChange={(ev) => this.handleGameDifficulty(ev)} disabled={this.state.game_start}></input>\r\n                <label htmlFor=\"easy\">Easy</label>\r\n\r\n                <input type=\"radio\" name=\"gameDifficulty\" id=\"medium\" checked={this.state.difficulty === 'medium'}\r\n                    onChange={(ev) => this.handleGameDifficulty(ev)} disabled={this.state.game_start}></input>\r\n                <label htmlFor=\"medium\">Medium</label>\r\n\r\n                <input type=\"radio\" name=\"gameDifficulty\" id=\"hard\" checked={this.state.difficulty === 'hard'}\r\n                    onChange={(ev) => this.handleGameDifficulty(ev)} disabled={this.state.game_start}></input>\r\n                <label htmlFor=\"hard\">Hard</label>\r\n            </>\r\n        }\r\n\r\n        return (\r\n            <div style={this.rootDiv}>\r\n                <div style={this.gameSetting}>\r\n                    <h3>Game Setting</h3>\r\n                    <input id=\"play_with_bot\" type=\"checkbox\" disabled={this.state.game_start} checked={this.state.play_with_bot} onChange={(ev) => this.handlePlayWithBot(ev)} />\r\n                    <label htmlFor=\"play_with_bot\">Play with bot</label>\r\n                    {game_difficulty}\r\n                </div>\r\n                <div id=\"container\" style={this.boardStyle}>\r\n                    <h2>{status}</h2>\r\n                    <div className=\"block\">\r\n                        {this.renderBox(0, \"box top left\")}\r\n                        {this.renderBox(1, \"box top middle\")}\r\n                        {this.renderBox(2, \"box top right\")}\r\n                    </div>\r\n                    <div className=\"block\">\r\n                        {this.renderBox(3, \"box left\")}\r\n                        {this.renderBox(4, \"box middle\")}\r\n                        {this.renderBox(5, \"box right\")}\r\n                    </div>\r\n                    <div className=\"block\">\r\n                        {this.renderBox(6, \"box bottom left\")}\r\n                        {this.renderBox(7, \"box bottom middle\")}\r\n                        {this.renderBox(8, \"box bottom right\")}\r\n                    </div>\r\n                </div>\r\n                <div style={this.historyStyle}>\r\n                    <h3>History</h3>\r\n                    <div style={this.historyDiv}>\r\n                        {game_history}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board\r\n\r\n","import React, { Component } from 'react'\r\nimport { Board } from './Board'\r\n\r\nexport class Game extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Board />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game\r\n\r\n","import './App.css';\nimport { Game } from './components/Game';\n\nfunction App() {\n  return (<>\n    <Game />\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}